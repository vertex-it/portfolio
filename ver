#!/bin/bash

VER_VERSION=1.3.0

if [ -f ./.env ]; then
    source ./.env
fi

export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"app"}
export HOST_UID
export APP_SHORT_URL
export DB_FORWARD_PORT=${DB_FORWARD_PORT:-3306}

HOST_UID=$(id -u)

# Remove http and https from APP_URL
APP_SHORT_URL=$(echo "${APP_URL:-"localhost"}" | sed "s/https\?:\/\///")

#######################################
# FUNCTIONS
#######################################

dockerCompose () {
    docker compose -f docker-compose.yml -f docker-compose.dev.yml "${@:1}"
}

# Run an Artisan command
artisan () {
    dockerCompose exec -u dkuser "$APP_SERVICE" php artisan "${@:1}"
}

# Run npm command
npm () {
    dockerCompose exec -u dkuser "$APP_SERVICE" npm "${@:1}"
}

# Build all of the images or the specified one
build () {
    dockerCompose build "${@:1}"
}

# Run a Composer command
composer () {
    dockerCompose run -u ${UID}:${UID} --rm "$APP_SERVICE" composer "${@:1}"
}

# Remove the entire Docker environment
destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    dockerCompose down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down () {
    dockerCompose down "${@:1}"
}

# Display and tail the logs of all containers or the specified one's
logs () {
    dockerCompose logs -f "${@:1}"
}

# Restart the containers
restart () {
    stop && start
}

# Start the containers
start () {
    dockerCompose up -d --remove-orphans
}

# Stop the containers
stop () {
    dockerCompose stop
}

exec () {
    dockerCompose exec "${@:1}"
}

# Run a Yarn command
yarn () {
    dockerCompose run --rm frontend yarn "${@:1}"
}

new () {
    if [ -d "app" ]
        then
            echo "Laravel is already installed"
            exit 1
        fi

    docker run -u ${UID}:${UID} --rm -v $(pwd):/app -w /app composer composer create-project --prefer-dist laravel/laravel laravel-app

    shopt -s dotglob nullglob

    mv ./laravel-app/* .
    rm -rf laravel-app

    sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' .env .env.example
    sed -i 's/DB_USERNAME=root/DB_USERNAME=db_user/' .env .env.example
    sed -i 's/DB_PASSWORD=/DB_PASSWORD=db_secret/' .env .env.example

    start

    until curl localhost:"$DB_FORWARD_PORT" --http0.9 --output /dev/null --silent
    do
        {
            echo 'Waiting for database to be ready...'
            ((COUNT++)) && ((COUNT==20)) && echo "Could not connect to database after 20 tries!" && exit 1
            sleep 3
        } 1>&2
    done

    artisan migrate

    composer require --dev barryvdh/laravel-ide-helper
    artisan ide-helper:generate && artisan ide-helper:meta && artisan ide-helper:models --write-mixin
    grep -qxF '_ide_helper*.php' .gitignore || echo '_ide_helper*.php' >> .gitignore
    grep -qxF '.phpstorm.meta.php' .gitignore || echo '.phpstorm.meta.php' >> .gitignore

    lintInstall
    lint

    git init && git add -A && git commit -m "Initial commit"

    source .env && echo "$APP_URL"
}

hosts () {
    read -p "This command will add your app url to /etc/hosts. Are you sure? [y/n]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi

    if [ -z "$APP_SHORT_URL" ]
    then
          echo "APP_SHORT_URL is empty. Aborting."
    else
          echo "127.0.0.1	$APP_SHORT_URL" | sudo tee -a /etc/hosts
          echo "Added to /etc/hosts"
    fi
}

lint () {
    if [ ! -d tools/php-cs-fixer/vendor/vertex-it/php-cs ]; then
        echo "PHP cs fixer is not installed. Visit https://github.com/vertex-it/php-cs and install it, or run \"ver lint-install\"."

        return
    fi

    dockerCompose run --rm app php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix
}

lintInstall () {
    if [ -d "tools/php-cs-fixer" ]
    then
        echo "php-cs-fixer already installed"
        exit 1
    fi

    echo "Installing vertex-it/php-cs"

    mkdir --parents tools/php-cs-fixer
    composer require --working-dir=tools/php-cs-fixer vertex-it/php-cs:dev-master

    cp tools/php-cs-fixer/vendor/vertex-it/php-cs/src/.php-cs-fixer.dist.php .php-cs-fixer.dist.php

    echo "Done. Run \"ver lint\" to run cs fixer"

    grep -qxF '/tools' .gitignore || echo '/tools' >> .gitignore
    grep -qxF '.php-cs-fixer.*' .gitignore || echo '.php-cs-fixer.*' >> .gitignore
}

version () {
    VER_SCRIPT_LOCATION="https://raw.githubusercontent.com/vertex-it/laravel-docker-setup/master/ver"

    LATEST_VERSION=$(curl -s $VER_SCRIPT_LOCATION | grep -m 1 VER_VERSION | awk -F '=' '{print $2}')

    if [ "$VER_VERSION" == "$LATEST_VERSION" ]; then
        echo "ver script is up to date."
    else
        echo -e "ver script is out of date.\nCurrent version: $VER_VERSION - Latest version: $LATEST_VERSION"
    fi
}

case "$1" in
    start | up)
        start
        ;;
    stop | down)
        stop
        ;;
    restart)
        stop && start
        ;;
    docker-compose)
        dockerCompose "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    destroy)
        destroy
        ;;
    art | artisan)
        artisan "${@:2}"
        ;;
    npm)
        npm "${@:2}"
        ;;
    logs)
        dockerCompose logs -f "${@:2}"
        ;;
    shell)
        dockerCompose exec -u dkuser "$APP_SERVICE" sh
        ;;
    exec)
        exec "${@:2}"
        ;;
    tinker)
        dockerCompose exec -u dkuser "$APP_SERVICE" php artisan tinker
        ;;
    composer)
        dockerCompose exec -u dkuser "$APP_SERVICE" composer "${@:2}"
        ;;
    localtunnel | share)
        dockerCompose logs localtunnel | grep "loca.lt"
        ;;
    hosts)
        hosts
        ;;
    lint)
        lint
        ;;
    lint-install)
        lintInstall
        ;;
    new)
        new
        ;;
    init)
        ./app-init.sh
        ;;
    version)
        version
        ;;
    *)
        cat << EOF

Command line interface for the Docker-based web development environment ver.

Usage:
    ver <command> [options] [arguments]

Available commands:
    start|up ................................ Start the containers
    stop|down ............................... Stop the containers
    restart ................................. Restart the containers
    build ................................... Build app image
    destroy ................................. Remove the entire Docker environment
    docker-compose .......................... Run docker-compose command
    exec [container] [command] .............. Execute the command in the given container
    logs [container] ........................ Display and tail the logs of all containers or the specified one's
    composer ................................ Run a Composer command
    art|artisan ............................. Run an Artisan command
    shell ................................... Go to the app container's shell
    tinker .................................. Run Tinker session
    npm ..................................... Run the npm command
    share ................................... Get the public tunnel URL of the project
    hosts ................................... Add local app URL to the /etc/hosts file
    lint .................................... Run PHP CS Fixer
    lint-install ............................ Install PHP CS Fixer
    new ..................................... Install and start new Laravel application
    init .................................... Initialize and start existing Laravel application
    version ................................. Check ver script version

EOF
        exit 1
        ;;
esac
