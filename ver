#!/bin/bash

# TODO check if needed
# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"app"}
export DB_PORT=${DB_PORT:-3306}
export HOST_UID=$(id -u)

#######################################
# FUNCTIONS
#######################################

dockerCompose () {
    docker-compose -f docker-compose.yml -f docker-compose.dev.yml "${@:1}"
}

# Run an Artisan command
artisan () {
    dockerCompose exec -u dkuser "$APP_SERVICE" php artisan "${@:1}"
}

# Run npm command
npm () {
    dockerCompose exec -u dkuser "$APP_SERVICE" npm "${@:1}"
}

# Build all of the images or the specified one
build () {
    dockerCompose build "${@:1}"
}

# Run a Composer command
composer () {
    dockerCompose run -u ${UID}:${UID} --rm "$APP_SERVICE" composer "${@:1}"
}

# Remove the entire Docker environment
destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    dockerCompose down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down () {
    dockerCompose down "${@:1}"
}

# Display and tail the logs of all containers or the specified one's
logs () {
    dockerCompose logs -f "${@:1}"
}

# Restart the containers
restart () {
    stop && start
}

# Start the containers
start () {
    dockerCompose up -d
}

# Stop the containers
stop () {
    dockerCompose stop
}

# Run a Yarn command
yarn () {
    dockerCompose run --rm frontend yarn "${@:1}"
}

env () {
    if [ ! -f .env ]; then
        cp .env.example .env
    fi
}

makeProject () {
    docker run -u ${UID}:${UID} --rm -v $(pwd):/app -w /app composer composer create-project --prefer-dist laravel/laravel laravel-app

    shopt -s dotglob nullglob

    mv ./laravel-app/* .
    rm -rf laravel-app
}

hosts () {
    read -p "This command will add your app url to /etc/hosts. Are you sure? [y/n]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi

    app_url="$(cat .env | grep 'APP_URL' | cut -d '=' -f2)"

    if [ -z "$app_url" ]
    then
          echo "APP_URL is empty. Aborting."
    else
          echo "127.0.0.1	$app_url" | sudo tee -a /etc/hosts
          echo "Added to /etc/hosts"
    fi
}

lint () {
    if [ ! -d tools/php-cs-fixer/vendor/vertex-it/php-cs ]; then
        echo "PHP cs fixer is not installed. Visit https://github.com/vertex-it/php-cs and install it, or run \"ver lint-install\"."

        return
    fi

    dockerCompose run --rm app php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix "${@:1}"
}

lintInstall () {
    echo "Installing vertex-it/php-cs"

    mkdir --parents tools/php-cs-fixer
    composer require --working-dir=tools/php-cs-fixer vertex-it/php-cs:dev-master

    cp tools/php-cs-fixer/vendor/vertex-it/php-cs/src/.php-cs-fixer.dist.php .php-cs-fixer.dist.php

    echo "Done. Run \"ver lint\" to run cs fixer"
}

case "$1" in
    start | up)
        start
        ;;
    stop | down)
        stop
        ;;
    restart)
        stop && start
        ;;
    docker-compose)
        dockerCompose "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    destroy)
        destroy
        ;;
    art | artisan)
        artisan "${@:2}"
        ;;
    npm)
        npm "${@:2}"
        ;;
    logs)
        dockerCompose logs -f "${@:2}"
        ;;
    shell)
        dockerCompose exec -u dkuser "$APP_SERVICE" sh
        ;;
    tinker)
        dockerCompose exec -u dkuser "$APP_SERVICE" php artisan tinker
        ;;
    composer)
        dockerCompose exec -u dkuser "$APP_SERVICE" composer "${@:2}"
        ;;
    localtunnel | share)
        dockerCompose logs localtunnel | grep "loca.lt"
        ;;
    hosts)
        hosts
        ;;
    lint)
        lint "${@:2}"
        ;;
    lint-install)
        lintInstall
        ;;
    init)
        env \
            && down -v \
            && build \
            && composer install \
            && artisan key:generate --ansi \
            && artisan migrate \
            && start
        ;;
    make-project)
        makeProject
        ;;
    *)
        cat << EOF

Command line interface for the Docker-based web development environment demo.

Usage:
    demo <command> [options] [arguments]

Available commands:
    artisan ................................... Run an Artisan command
    build [image] ............................. Build all of the images or the specified one
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    init ...................................... Initialise the Docker environment and the application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    update .................................... Update the Docker environment
    yarn ...................................... Run a Yarn command

EOF
        exit 1
        ;;
esac
